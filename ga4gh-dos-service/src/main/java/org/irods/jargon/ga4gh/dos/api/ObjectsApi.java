/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.4).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.irods.jargon.ga4gh.dos.api;

import org.irods.jargon.ga4gh.dos.model.AccessURL;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-05-14T11:28:18.659Z")

@Api(value = "objects", description = "the objects API")
public interface ObjectsApi {

	@ApiOperation(value = "Get a URL for fetching bytes.", nickname = "getAccessURL", notes = "Returns a URL that can be used to fetch the object bytes.  This method only needs to be called when using an `AccessMethod` that contains an `access_id` (e.g., for servers that use signed URLs for fetching object bytes).", response = AccessURL.class, authorizations = {
			@Authorization(value = "authToken") }, tags = { "DataRepositoryService", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The access URL was found successfully.", response = AccessURL.class),
			@ApiResponse(code = 400, message = "The request is malformed.", response = Error.class),
			@ApiResponse(code = 401, message = "The request is unauthorized.", response = Error.class),
			@ApiResponse(code = 403, message = "The requester is not authorized to perform this action.", response = Error.class),
			@ApiResponse(code = 404, message = "The requested access URL wasn't found", response = Error.class),
			@ApiResponse(code = 500, message = "An unexpected error occurred.", response = Error.class) })
	@RequestMapping(value = "/objects/{object_id}/access/{access_id}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<AccessURL> getAccessURL(
			@ApiParam(value = "An `id` of a Data Ga4ghObject", required = true) @PathVariable("object_id") String objectId,
			@ApiParam(value = "An `access_id` from the `access_methods` list of a Data Ga4ghObject", required = true) @PathVariable("access_id") String accessId);

	@ApiOperation(value = "Get info about a Data Ga4ghObject.", nickname = "getObject", notes = "Returns object metadata, and a list of access methods that can be used to fetch object bytes.", response = Object.class, authorizations = {
			@Authorization(value = "authToken") }, tags = { "DataRepositoryService", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The Data Ga4ghObject was found successfully.", response = Object.class),
			@ApiResponse(code = 400, message = "The request is malformed.", response = Error.class),
			@ApiResponse(code = 401, message = "The request is unauthorized.", response = Error.class),
			@ApiResponse(code = 403, message = "The requester is not authorized to perform this action.", response = Error.class),
			@ApiResponse(code = 404, message = "The requested Data Ga4ghObject wasn't found", response = Error.class),
			@ApiResponse(code = 500, message = "An unexpected error occurred.", response = Error.class) })
	@RequestMapping(value = "/objects/{object_id}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<org.irods.jargon.ga4gh.dos.model.Ga4ghObject> getObject(
			@ApiParam(value = "", required = true) @PathVariable("object_id") String objectId);

}
