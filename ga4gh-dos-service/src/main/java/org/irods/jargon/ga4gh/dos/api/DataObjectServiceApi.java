/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.irods.jargon.ga4gh.dos.api;

import java.io.IOException;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.irods.jargon.ga4gh.dos.model.CreateDataBundleRequest;
import org.irods.jargon.ga4gh.dos.model.CreateDataBundleResponse;
import org.irods.jargon.ga4gh.dos.model.CreateDataObjectRequest;
import org.irods.jargon.ga4gh.dos.model.CreateDataObjectResponse;
import org.irods.jargon.ga4gh.dos.model.DeleteDataBundleResponse;
import org.irods.jargon.ga4gh.dos.model.DeleteDataObjectResponse;
import org.irods.jargon.ga4gh.dos.model.ErrorResponse;
import org.irods.jargon.ga4gh.dos.model.GetDataBundleResponse;
import org.irods.jargon.ga4gh.dos.model.GetDataBundleVersionsResponse;
import org.irods.jargon.ga4gh.dos.model.GetDataObjectResponse;
import org.irods.jargon.ga4gh.dos.model.GetDataObjectVersionsResponse;
import org.irods.jargon.ga4gh.dos.model.ListDataBundlesResponse;
import org.irods.jargon.ga4gh.dos.model.ListDataObjectsResponse;
import org.irods.jargon.ga4gh.dos.model.ServiceInfoResponse;
import org.irods.jargon.ga4gh.dos.model.UpdateDataBundleRequest;
import org.irods.jargon.ga4gh.dos.model.UpdateDataBundleResponse;
import org.irods.jargon.ga4gh.dos.model.UpdateDataObjectRequest;
import org.irods.jargon.ga4gh.dos.model.UpdateDataObjectResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.fasterxml.jackson.databind.ObjectMapper;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-11-13T20:57:40.775Z")

@Api(value = "DataObjectService", description = "the DataObjectService API")
public interface DataObjectServiceApi {

	Logger log = LoggerFactory.getLogger(DataObjectServiceApi.class);

	default Optional<ObjectMapper> getObjectMapper() {
		return Optional.empty();
	}

	default Optional<HttpServletRequest> getRequest() {
		return Optional.empty();
	}

	default Optional<String> getAcceptHeader() {
		return getRequest().map(r -> r.getHeader("Accept"));
	}

	@ApiOperation(value = "Create a new Data Bundle", nickname = "createDataBundle", notes = "", response = CreateDataBundleResponse.class, tags = {
			"DataObjectService", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The Data Bundle was successfully created.", response = CreateDataBundleResponse.class),
			@ApiResponse(code = 400, message = "The request is malformed.", response = ErrorResponse.class),
			@ApiResponse(code = 401, message = "The request is unauthorized.", response = ErrorResponse.class),
			@ApiResponse(code = 403, message = "The requester is not authorized to perform this action.", response = ErrorResponse.class),
			@ApiResponse(code = 500, message = "An unexpected error occurred.", response = ErrorResponse.class) })
	@RequestMapping(value = "/databundles", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	default ResponseEntity<CreateDataBundleResponse> createDataBundle(
			@ApiParam(value = "", required = true) @Valid @RequestBody CreateDataBundleRequest body) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return new ResponseEntity<>(getObjectMapper().get()
							.readValue("{  \"data_bundle_id\" : \"data_bundle_id\"}", CreateDataBundleResponse.class),
							HttpStatus.NOT_IMPLEMENTED);
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default DataObjectServiceApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@ApiOperation(value = "Make a new Data Object", nickname = "createDataObject", notes = "", response = CreateDataObjectResponse.class, tags = {
			"DataObjectService", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Successfully created the Data Object.", response = CreateDataObjectResponse.class),
			@ApiResponse(code = 400, message = "The request is malformed.", response = ErrorResponse.class),
			@ApiResponse(code = 401, message = "The request is unauthorized.", response = ErrorResponse.class),
			@ApiResponse(code = 403, message = "The requester is not authorized to perform this action.", response = ErrorResponse.class),
			@ApiResponse(code = 500, message = "An unexpected error occurred.", response = ErrorResponse.class) })
	@RequestMapping(value = "/dataobjects", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	default ResponseEntity<CreateDataObjectResponse> createDataObject(
			@ApiParam(value = "The Data Object to be created. The ID scheme is left up to the implementor but should be unique to the server instance.", required = true) @Valid @RequestBody CreateDataObjectRequest body) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return new ResponseEntity<>(getObjectMapper().get()
							.readValue("{  \"data_object_id\" : \"data_object_id\"}", CreateDataObjectResponse.class),
							HttpStatus.NOT_IMPLEMENTED);
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default DataObjectServiceApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@ApiOperation(value = "Delete a Data Bundle", nickname = "deleteDataBundle", notes = "", response = DeleteDataBundleResponse.class, tags = {
			"DataObjectService", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "", response = DeleteDataBundleResponse.class) })
	@RequestMapping(value = "/databundles/{data_bundle_id}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.DELETE)
	default ResponseEntity<DeleteDataBundleResponse> deleteDataBundle(
			@ApiParam(value = "", required = true) @PathVariable("data_bundle_id") String dataBundleId) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return new ResponseEntity<>(getObjectMapper().get()
							.readValue("{  \"data_bundle_id\" : \"data_bundle_id\"}", DeleteDataBundleResponse.class),
							HttpStatus.NOT_IMPLEMENTED);
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default DataObjectServiceApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@ApiOperation(value = "Delete a Data Object index entry", nickname = "deleteDataObject", notes = "", response = DeleteDataObjectResponse.class, tags = {
			"DataObjectService", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The Data Object was deleted successfully.", response = DeleteDataObjectResponse.class),
			@ApiResponse(code = 400, message = "The request is malformed.", response = ErrorResponse.class),
			@ApiResponse(code = 401, message = "The request is unauthorized.", response = ErrorResponse.class),
			@ApiResponse(code = 403, message = "The requester is not authorized to perform this action.", response = ErrorResponse.class),
			@ApiResponse(code = 404, message = "The requested Data Object wasn't found.", response = ErrorResponse.class),
			@ApiResponse(code = 500, message = "An unexpected error occurred.", response = ErrorResponse.class) })
	@RequestMapping(value = "/dataobjects/{data_object_id}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.DELETE)
	default ResponseEntity<DeleteDataObjectResponse> deleteDataObject(
			@ApiParam(value = "", required = true) @PathVariable("data_object_id") String dataObjectId) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return new ResponseEntity<>(getObjectMapper().get()
							.readValue("{  \"data_object_id\" : \"data_object_id\"}", DeleteDataObjectResponse.class),
							HttpStatus.NOT_IMPLEMENTED);
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default DataObjectServiceApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@ApiOperation(value = "Retrieve a Data Bundle", nickname = "getDataBundle", notes = "", response = GetDataBundleResponse.class, tags = {
			"DataObjectService", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Successfully found the Data Bundle.", response = GetDataBundleResponse.class),
			@ApiResponse(code = 400, message = "The request is malformed.", response = ErrorResponse.class),
			@ApiResponse(code = 401, message = "The request is unauthorized.", response = ErrorResponse.class),
			@ApiResponse(code = 403, message = "The requester is not authorized to perform this action.", response = ErrorResponse.class),
			@ApiResponse(code = 404, message = "The requested Data Bundle wasn't found.", response = ErrorResponse.class),
			@ApiResponse(code = 500, message = "An unexpected error occurred.", response = ErrorResponse.class) })
	@RequestMapping(value = "/databundles/{data_bundle_id}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.GET)
	default ResponseEntity<GetDataBundleResponse> getDataBundle(
			@ApiParam(value = "", required = true) @PathVariable("data_bundle_id") String dataBundleId,
			@ApiParam(value = "If provided will return the requested version of the selected Data Bundle. Otherwise, only the latest version is returned.") @Valid @RequestParam(value = "version", required = false) String version) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return new ResponseEntity<>(getObjectMapper().get().readValue(
							"{  \"data_bundle\" : {    \"checksums\" : [ {      \"checksum\" : \"checksum\",      \"type\" : \"type\"    }, {      \"checksum\" : \"checksum\",      \"type\" : \"type\"    } ],    \"aliases\" : [ \"aliases\", \"aliases\" ],    \"user_metadata\" : { },    \"created\" : \"2000-01-23T04:56:07.000+00:00\",    \"description\" : \"description\",    \"data_object_ids\" : [ \"data_object_ids\", \"data_object_ids\" ],    \"id\" : \"id\",    \"updated\" : \"2000-01-23T04:56:07.000+00:00\",    \"version\" : \"version\",    \"system_metadata\" : { }  }}",
							GetDataBundleResponse.class), HttpStatus.NOT_IMPLEMENTED);
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default DataObjectServiceApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@ApiOperation(value = "Retrieve all versions of a Data Bundle", nickname = "getDataBundleVersions", notes = "", response = GetDataBundleVersionsResponse.class, tags = {
			"DataObjectService", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The versions for the Data Bundle were found successfully.", response = GetDataBundleVersionsResponse.class),
			@ApiResponse(code = 400, message = "The request is malformed.", response = ErrorResponse.class),
			@ApiResponse(code = 401, message = "The request is unauthorized.", response = ErrorResponse.class),
			@ApiResponse(code = 403, message = "The requester is not authorized to perform this action.", response = ErrorResponse.class),
			@ApiResponse(code = 404, message = "The requested Data Bundle wasn't found.", response = ErrorResponse.class),
			@ApiResponse(code = 500, message = "An unexpected error occurred.", response = ErrorResponse.class) })
	@RequestMapping(value = "/databundles/{data_bundle_id}/versions", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.GET)
	default ResponseEntity<GetDataBundleVersionsResponse> getDataBundleVersions(
			@ApiParam(value = "", required = true) @PathVariable("data_bundle_id") String dataBundleId) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return new ResponseEntity<>(getObjectMapper().get().readValue(
							"{  \"data_bundles\" : [ {    \"checksums\" : [ {      \"checksum\" : \"checksum\",      \"type\" : \"type\"    }, {      \"checksum\" : \"checksum\",      \"type\" : \"type\"    } ],    \"aliases\" : [ \"aliases\", \"aliases\" ],    \"user_metadata\" : { },    \"created\" : \"2000-01-23T04:56:07.000+00:00\",    \"description\" : \"description\",    \"data_object_ids\" : [ \"data_object_ids\", \"data_object_ids\" ],    \"id\" : \"id\",    \"updated\" : \"2000-01-23T04:56:07.000+00:00\",    \"version\" : \"version\",    \"system_metadata\" : { }  }, {    \"checksums\" : [ {      \"checksum\" : \"checksum\",      \"type\" : \"type\"    }, {      \"checksum\" : \"checksum\",      \"type\" : \"type\"    } ],    \"aliases\" : [ \"aliases\", \"aliases\" ],    \"user_metadata\" : { },    \"created\" : \"2000-01-23T04:56:07.000+00:00\",    \"description\" : \"description\",    \"data_object_ids\" : [ \"data_object_ids\", \"data_object_ids\" ],    \"id\" : \"id\",    \"updated\" : \"2000-01-23T04:56:07.000+00:00\",    \"version\" : \"version\",    \"system_metadata\" : { }  } ]}",
							GetDataBundleVersionsResponse.class), HttpStatus.NOT_IMPLEMENTED);
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default DataObjectServiceApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@ApiOperation(value = "Retrieve a Data Object", nickname = "getDataObject", notes = "", response = GetDataObjectResponse.class, tags = {
			"DataObjectService", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The Data Object was found successfully.", response = GetDataObjectResponse.class),
			@ApiResponse(code = 400, message = "The request is malformed.", response = ErrorResponse.class),
			@ApiResponse(code = 401, message = "The request is unauthorized.", response = ErrorResponse.class),
			@ApiResponse(code = 403, message = "The requester is not authorized to perform this action.", response = ErrorResponse.class),
			@ApiResponse(code = 404, message = "The requested Data Object wasn't found", response = ErrorResponse.class),
			@ApiResponse(code = 500, message = "An unexpected error occurred.", response = ErrorResponse.class) })
	@RequestMapping(value = "/dataobjects/{data_object_id}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.GET)
	default ResponseEntity<GetDataObjectResponse> getDataObject(
			@ApiParam(value = "", required = true) @PathVariable("data_object_id") String dataObjectId,
			@ApiParam(value = "If provided will return the requested version of the selected Data Object.") @Valid @RequestParam(value = "version", required = false) String version) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return new ResponseEntity<>(getObjectMapper().get().readValue(
							"{  \"data_object\" : {    \"checksums\" : [ {      \"checksum\" : \"checksum\",      \"type\" : \"type\"    }, {      \"checksum\" : \"checksum\",      \"type\" : \"type\"    } ],    \"urls\" : [ {      \"user_metadata\" : { },      \"system_metadata\" : { },      \"url\" : \"url\"    }, {      \"user_metadata\" : { },      \"system_metadata\" : { },      \"url\" : \"url\"    } ],    \"aliases\" : [ \"aliases\", \"aliases\" ],    \"size\" : \"size\",    \"mime_type\" : \"mime_type\",    \"created\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"description\" : \"description\",    \"id\" : \"id\",    \"updated\" : \"2000-01-23T04:56:07.000+00:00\",    \"version\" : \"version\"  }}",
							GetDataObjectResponse.class), HttpStatus.NOT_IMPLEMENTED);
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default DataObjectServiceApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@ApiOperation(value = "Retrieve all versions of a Data Object", nickname = "getDataObjectVersions", notes = "", response = GetDataObjectVersionsResponse.class, tags = {
			"DataObjectService", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The versions for the Data Object were returned successfully.", response = GetDataObjectVersionsResponse.class),
			@ApiResponse(code = 400, message = "The request is malformed.", response = ErrorResponse.class),
			@ApiResponse(code = 401, message = "The request is unauthorized.", response = ErrorResponse.class),
			@ApiResponse(code = 403, message = "The requester is not authorized to perform this action.", response = ErrorResponse.class),
			@ApiResponse(code = 404, message = "The requested Data Object wasn't found.", response = ErrorResponse.class),
			@ApiResponse(code = 500, message = "An unexpected error occurred.", response = ErrorResponse.class) })
	@RequestMapping(value = "/dataobjects/{data_object_id}/versions", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.GET)
	default ResponseEntity<GetDataObjectVersionsResponse> getDataObjectVersions(
			@ApiParam(value = "", required = true) @PathVariable("data_object_id") String dataObjectId) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return new ResponseEntity<>(getObjectMapper().get().readValue(
							"{  \"data_objects\" : [ {    \"checksums\" : [ {      \"checksum\" : \"checksum\",      \"type\" : \"type\"    }, {      \"checksum\" : \"checksum\",      \"type\" : \"type\"    } ],    \"urls\" : [ {      \"user_metadata\" : { },      \"system_metadata\" : { },      \"url\" : \"url\"    }, {      \"user_metadata\" : { },      \"system_metadata\" : { },      \"url\" : \"url\"    } ],    \"aliases\" : [ \"aliases\", \"aliases\" ],    \"size\" : \"size\",    \"mime_type\" : \"mime_type\",    \"created\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"description\" : \"description\",    \"id\" : \"id\",    \"updated\" : \"2000-01-23T04:56:07.000+00:00\",    \"version\" : \"version\"  }, {    \"checksums\" : [ {      \"checksum\" : \"checksum\",      \"type\" : \"type\"    }, {      \"checksum\" : \"checksum\",      \"type\" : \"type\"    } ],    \"urls\" : [ {      \"user_metadata\" : { },      \"system_metadata\" : { },      \"url\" : \"url\"    }, {      \"user_metadata\" : { },      \"system_metadata\" : { },      \"url\" : \"url\"    } ],    \"aliases\" : [ \"aliases\", \"aliases\" ],    \"size\" : \"size\",    \"mime_type\" : \"mime_type\",    \"created\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"description\" : \"description\",    \"id\" : \"id\",    \"updated\" : \"2000-01-23T04:56:07.000+00:00\",    \"version\" : \"version\"  } ]}",
							GetDataObjectVersionsResponse.class), HttpStatus.NOT_IMPLEMENTED);
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default DataObjectServiceApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@ApiOperation(value = "Returns service version and other information", nickname = "getServiceInfo", notes = "", response = ServiceInfoResponse.class, tags = {
			"DataObjectService", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Service information returned successfully", response = ServiceInfoResponse.class) })
	@RequestMapping(value = "/service-info", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.GET)
	default ResponseEntity<ServiceInfoResponse> getServiceInfo() {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return new ResponseEntity<>(getObjectMapper().get().readValue(
							"{  \"license\" : \"{}\",  \"contact\" : \"{}\",  \"description\" : \"description\",  \"title\" : \"title\",  \"version\" : \"version\"}",
							ServiceInfoResponse.class), HttpStatus.NOT_IMPLEMENTED);
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default DataObjectServiceApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@ApiOperation(value = "List the Data Bundles", nickname = "listDataBundles", notes = "", response = ListDataBundlesResponse.class, tags = {
			"DataObjectService", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Successfully listed Data Bundles.", response = ListDataBundlesResponse.class),
			@ApiResponse(code = 400, message = "The request is malformed.", response = ErrorResponse.class),
			@ApiResponse(code = 401, message = "The request is unauthorized.", response = ErrorResponse.class),
			@ApiResponse(code = 403, message = "The requester is not authorized to perform this action.", response = ErrorResponse.class),
			@ApiResponse(code = 500, message = "An unexpected error occurred.", response = ErrorResponse.class) })
	@RequestMapping(value = "/databundles", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.GET)
	default ResponseEntity<ListDataBundlesResponse> listDataBundles(
			@ApiParam(value = "If provided returns Data Bundles that have any alias that matches the request.") @Valid @RequestParam(value = "alias", required = false) String alias,
			@ApiParam(value = "The hexlified checksum that one would like to match on.") @Valid @RequestParam(value = "checksum", required = false) String checksum,
			@ApiParam(value = "If provided will restrict responses to those that match the provided type.  possible values: md5                # most blob stores provide a checksum using this multipart-md5      # multipart uploads provide a specialized tag in S3 sha256 sha512") @Valid @RequestParam(value = "checksum_type", required = false) String checksumType,
			@ApiParam(value = "Specifies the maximum number of results to return in a single page. If unspecified, a system default will be used.") @Valid @RequestParam(value = "page_size", required = false) Integer pageSize,
			@ApiParam(value = "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of `next_page_token` from the previous response.") @Valid @RequestParam(value = "page_token", required = false) String pageToken) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return new ResponseEntity<>(getObjectMapper().get().readValue(
							"{  \"data_bundles\" : [ {    \"checksums\" : [ {      \"checksum\" : \"checksum\",      \"type\" : \"type\"    }, {      \"checksum\" : \"checksum\",      \"type\" : \"type\"    } ],    \"aliases\" : [ \"aliases\", \"aliases\" ],    \"user_metadata\" : { },    \"created\" : \"2000-01-23T04:56:07.000+00:00\",    \"description\" : \"description\",    \"data_object_ids\" : [ \"data_object_ids\", \"data_object_ids\" ],    \"id\" : \"id\",    \"updated\" : \"2000-01-23T04:56:07.000+00:00\",    \"version\" : \"version\",    \"system_metadata\" : { }  }, {    \"checksums\" : [ {      \"checksum\" : \"checksum\",      \"type\" : \"type\"    }, {      \"checksum\" : \"checksum\",      \"type\" : \"type\"    } ],    \"aliases\" : [ \"aliases\", \"aliases\" ],    \"user_metadata\" : { },    \"created\" : \"2000-01-23T04:56:07.000+00:00\",    \"description\" : \"description\",    \"data_object_ids\" : [ \"data_object_ids\", \"data_object_ids\" ],    \"id\" : \"id\",    \"updated\" : \"2000-01-23T04:56:07.000+00:00\",    \"version\" : \"version\",    \"system_metadata\" : { }  } ],  \"next_page_token\" : \"next_page_token\"}",
							ListDataBundlesResponse.class), HttpStatus.NOT_IMPLEMENTED);
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default DataObjectServiceApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@ApiOperation(value = "List the Data Objects", nickname = "listDataObjects", notes = "", response = ListDataObjectsResponse.class, tags = {
			"DataObjectService", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The Data Objects were listed successfully.", response = ListDataObjectsResponse.class),
			@ApiResponse(code = 400, message = "The request is malformed.", response = ErrorResponse.class),
			@ApiResponse(code = 401, message = "The request is unauthorized.", response = ErrorResponse.class),
			@ApiResponse(code = 403, message = "The requester is not authorized to perform this action.", response = ErrorResponse.class),
			@ApiResponse(code = 500, message = "An unexpected error occurred.", response = ErrorResponse.class) })
	@RequestMapping(value = "/dataobjects", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.GET)
	default ResponseEntity<ListDataObjectsResponse> listDataObjects(
			@ApiParam(value = "If provided will only return Data Objects with the given alias.") @Valid @RequestParam(value = "alias", required = false) String alias,
			@ApiParam(value = "If provided will return only Data Objects with a that URL matches this string.") @Valid @RequestParam(value = "url", required = false) String url,
			@ApiParam(value = "The hexlified checksum that one would like to match on.") @Valid @RequestParam(value = "checksum", required = false) String checksum,
			@ApiParam(value = "If provided will restrict responses to those that match the provided type.  possible values: md5                # most blob stores provide a checksum using this multipart-md5      # multipart uploads provide a specialized tag in S3 sha256 sha512") @Valid @RequestParam(value = "checksum_type", required = false) String checksumType,
			@ApiParam(value = "Specifies the maximum number of results to return in a single page. If unspecified, a system default will be used.") @Valid @RequestParam(value = "page_size", required = false) Integer pageSize,
			@ApiParam(value = "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of `next_page_token` from the previous response.") @Valid @RequestParam(value = "page_token", required = false) String pageToken) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return new ResponseEntity<>(getObjectMapper().get().readValue(
							"{  \"next_page_token\" : \"next_page_token\",  \"data_objects\" : [ {    \"checksums\" : [ {      \"checksum\" : \"checksum\",      \"type\" : \"type\"    }, {      \"checksum\" : \"checksum\",      \"type\" : \"type\"    } ],    \"urls\" : [ {      \"user_metadata\" : { },      \"system_metadata\" : { },      \"url\" : \"url\"    }, {      \"user_metadata\" : { },      \"system_metadata\" : { },      \"url\" : \"url\"    } ],    \"aliases\" : [ \"aliases\", \"aliases\" ],    \"size\" : \"size\",    \"mime_type\" : \"mime_type\",    \"created\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"description\" : \"description\",    \"id\" : \"id\",    \"updated\" : \"2000-01-23T04:56:07.000+00:00\",    \"version\" : \"version\"  }, {    \"checksums\" : [ {      \"checksum\" : \"checksum\",      \"type\" : \"type\"    }, {      \"checksum\" : \"checksum\",      \"type\" : \"type\"    } ],    \"urls\" : [ {      \"user_metadata\" : { },      \"system_metadata\" : { },      \"url\" : \"url\"    }, {      \"user_metadata\" : { },      \"system_metadata\" : { },      \"url\" : \"url\"    } ],    \"aliases\" : [ \"aliases\", \"aliases\" ],    \"size\" : \"size\",    \"mime_type\" : \"mime_type\",    \"created\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"description\" : \"description\",    \"id\" : \"id\",    \"updated\" : \"2000-01-23T04:56:07.000+00:00\",    \"version\" : \"version\"  } ]}",
							ListDataObjectsResponse.class), HttpStatus.NOT_IMPLEMENTED);
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default DataObjectServiceApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@ApiOperation(value = "Update a Data Bundle", nickname = "updateDataBundle", notes = "", response = UpdateDataBundleResponse.class, tags = {
			"DataObjectService", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The Data Bundle was updated successfully.", response = UpdateDataBundleResponse.class),
			@ApiResponse(code = 400, message = "The request is malformed.", response = ErrorResponse.class),
			@ApiResponse(code = 401, message = "The request is unauthorized.", response = ErrorResponse.class),
			@ApiResponse(code = 403, message = "The requester is not authorized to perform this action.", response = ErrorResponse.class),
			@ApiResponse(code = 404, message = "The requested Data Bundle wasn't found.", response = ErrorResponse.class),
			@ApiResponse(code = 500, message = "An unexpected error occurred.", response = ErrorResponse.class) })
	@RequestMapping(value = "/databundles/{data_bundle_id}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.PUT)
	default ResponseEntity<UpdateDataBundleResponse> updateDataBundle(
			@ApiParam(value = "The ID of the Data Bundle to update", required = true) @PathVariable("data_bundle_id") String dataBundleId,
			@ApiParam(value = "The new content for the Data Bundle identified by the given data_bundle_id. If the ID specified in the request body is different than that specified in the path, the Data Bundle's ID will be replaced with the one in the request body.", required = true) @Valid @RequestBody UpdateDataBundleRequest body) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return new ResponseEntity<>(getObjectMapper().get()
							.readValue("{  \"data_bundle_id\" : \"data_bundle_id\"}", UpdateDataBundleResponse.class),
							HttpStatus.NOT_IMPLEMENTED);
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default DataObjectServiceApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@ApiOperation(value = "Update a Data Object", nickname = "updateDataObject", notes = "", response = UpdateDataObjectResponse.class, tags = {
			"DataObjectService", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The Data Object was successfully updated.", response = UpdateDataObjectResponse.class),
			@ApiResponse(code = 400, message = "The request is malformed.", response = ErrorResponse.class),
			@ApiResponse(code = 401, message = "The request is unauthorized.", response = ErrorResponse.class),
			@ApiResponse(code = 403, message = "The requester is not authorized to perform this action.", response = ErrorResponse.class),
			@ApiResponse(code = 404, message = "The requested Data Object wasn't found.", response = ErrorResponse.class),
			@ApiResponse(code = 500, message = "An unexpected error occurred.", response = ErrorResponse.class) })
	@RequestMapping(value = "/dataobjects/{data_object_id}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.PUT)
	default ResponseEntity<UpdateDataObjectResponse> updateDataObject(
			@ApiParam(value = "The ID of the Data Object to update", required = true) @PathVariable("data_object_id") String dataObjectId,
			@ApiParam(value = "The new Data Object for the given data_object_id. If the ID specified in the request body is different than that specified in the path, the Data Object's ID will be replaced with the one in the request body.", required = true) @Valid @RequestBody UpdateDataObjectRequest body) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return new ResponseEntity<>(getObjectMapper().get()
							.readValue("{  \"data_object_id\" : \"data_object_id\"}", UpdateDataObjectResponse.class),
							HttpStatus.NOT_IMPLEMENTED);
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default DataObjectServiceApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

}
